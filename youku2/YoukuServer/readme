功能介绍：
    1.基于tcp协议写一个类似视频客户端
    2.普通用户可以登录，注册（密码通过md5加密），登录成功后显示最新一条公告
    3.普通用户可以充值会员
    4.普通用户可以查看所有视频（打印所有视频名称）
    5.普通用户可以下载普通视频（非会员下载普通视频需要30s广告，会员下载无需等待）  广告剩余30
    6.普通用户可以下载收费视频（非会员下载收费10元，会员下载收费5元）
    7.普通用户可以查看观影记录（电影下载记录）
    8.普通用户可以查看公告（历史公告）
    9.管理员可以登录，注册
    10.管理员可以上传普通视频，上传收费视频
    11.管理员可以删除视频（并不是真正删除，只是用户看不到了）
    12.管理员可以发布公告
    13.管理员扩展功能：如查看总用户量，锁定，解锁用户
功能分析：
    管理员功能：1、登录 2、注册 3、上传普通视频，收费视频 4、删除视频 5、发布公告
    用户功能：1、登录 2、注册 3、查看所有视频 4、下载普通视频 5、下载收费视频 6、查看公告 7、查看观影记,8.开通会员,9.充值

表字段:
user:  id  name password  VIP   is_admin  is_lock  balance

video: name author  上传时间  is_free  is_delete

下载记录: 下载时间 文件名字 用户id

公告信息: 发布时间 标题  内容  发布者id








项目结构C/S结构
    粘包,并发
服务器采用三层结构
引入ORM框架


ORM
    object relation Mapping
    就是将对象数据转换为sql语句并执行

    对象关系映射框架
             转为sql语句
       user    ======>    映射为一条记录

    ORM需要做的事情
    1.生成创建表的语句
    2.插入数据语句
    2.删除数据语句
    2.修改数据语句
    2.查询数据语句

FTP 没有并发  没有数据库




ORM
    对象关系映射
    对象映射到数据库
    把对象操作 生产对应sql语句

    反过来 一条记录映射为一个对象

    1.创建表的语句
        应该在创建类的时候生成创建表的语句


    C增
        当应用程序创建了一条新数据(对象) 需要保存到数据库时生成插入语句
    R查询
        应用程序中需要获取某一类型的数据时

    U更新
        应用程序中需要修改一条数据时
    D删
        应用程序中需要删除一条数据时


class Person:
    def __call__():
           pass

    pass

p = Person() # 实例化产生对象
p()


元类:
    类的类叫元类
    元类是用来产生类

    __init__  创建类的时候自动执行

    __call__  调用一个对象就会执行对象所在类中的 __call__方法

    单例    一个类只能有一个实例  目的是为了节省资源





客户端

服务器

1.
客户端与服务器需要通过socket建立连接  只有建立连接后才能处理业务逻辑
socket的传输方式 有TCP 和 UDP,需要保证数据的完整性 选用TCP
TCP的粘包问题需要处理
一个客户端对应一个连接


2.
应用层需要确定 使用什么样的数据格式来进行交互
JSON 是一种跨平台性较强的数据格式,非常轻量级


3.
    url实例: www.baidu.com/login?name=xxx&password=xxx
    3.1 服务器需要从请求数据中来明确要执行的业务逻辑是哪个函数
        json中必须包含 func 这个key 用过来识别要执行的函数
    3.2 业务逻辑中,对数据进行读写操作(通过ORM)
    3.3 返回处理结果给客户端


上述的过程中 仅有业务逻辑的处理 是不同的 其他的基本是重复操作
我们把服务器的 建立连接  收发数据等等操作单独封装代一个模块
业务逻辑的处理也单独封装





































通过类名建表
指定元类 覆盖__init__ 获取类中的字段信息  用于拼接建表语句

一系列增删改查语句的拼接
连接 mysql 进行测试

BaseModel 原本是一个工具类 提供增删改查操作
为了简化使用   将其作为了公共父类  任何的子类 只要继承过都拥有了增删改查操作





所有客户端共享一个mysql的连接,并发效率低
1.来一个客户端 就创建一个新连接,性能问题  浪费资源
2.连接池














